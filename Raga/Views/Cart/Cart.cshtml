@model List<Afrodite.Models.OrderItems>

@{
    ViewData["Title"] = "Giỏ hàng";
}




<h1>Giỏ hàng</h1>

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">@TempData["Error"]</div>
}
else if (TempData["Success"] != null)
{
    <div class="alert alert-success">@TempData["Success"]</div>
}

@if (!Model.Any())
{
    <p>Giỏ hàng của bạn đang trống.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th style="text-align: center;">Hình ảnh</th>
                <th style="text-align: center;">Tên sản phẩm</th>
                <th >Số lượng</th>
                <th style="text-align: center;">Giá</th>
                <th style="text-align: center;">Tổng</th>
                <th style="text-align: center;">Hành động</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td style="text-align: center;">
                        @if (!string.IsNullOrEmpty(item.Product?.ImageUrl))
                        {
                            <img src="@item.Product.ImageUrl" alt="@item.Product.Name" style="width: 150px; height: auto; background-color: #181818" />
                        }
                    </td>
                    <td style="text-align: center; vertical-align: middle;">@item.Product?.Name</td>
                    <td style="text-align: center; vertical-align: middle;">
                        <input type="number" class="form-control quantity-input" value="@item.Quantity" min="1" onchange="updateQuantity(@item.ProductId, this.value, this)" />
                    </td>
                    <td style="text-align: center; vertical-align: middle;">@item.Price.ToString("N0") VND</td>
                    <td style="text-align: center; vertical-align: middle;" class="item-total">@((item.Price * item.Quantity).ToString("N0")) VND</td>
                    <td style="text-align: center; vertical-align: middle;">
                        <button class="btn btn-danger" onclick="removeFromCart(@item.ProductId)">Xóa</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    
    <div class="card bg-dark text-white mb-4" style="width: 500px; margin-left: auto;">
        <div class="card-body">
            <h1 class="text-center">Thanh toán</h1>
            <h5 class="card-title">Phí vận chuyển: <span id="shipping-cost">@TempData["ShippingCost"]</span></h5>
            <h3 class="card-title">Tổng cộng: 
                <span id="total-with-shipping">
                    @($"{(Model.Sum(c => c.Price * c.Quantity) + (TempData["ShippingCost"] != null ? Convert.ToDecimal(TempData["ShippingCost"]) : 0) - (TempData["DiscountAmount"] != null ? Convert.ToDecimal(TempData["DiscountAmount"]) : 0)):N0} VND")
                </span>
            </h3>
            
            <h6 class="card-title mt-4">Địa chỉ giao hàng:</h6>
            <div class="form-group">
                <input type="text" id="deliveryAddress" name="deliveryAddress" class="form-control" placeholder="Nhập địa chỉ giao hàng" required />
                <button type="button" class="btn btn-secondary mt-2" onclick="fetchDistanceAndShippingCost()">Tính phí vận chuyển</button>
                <span id="addressError" class="text-danger" style="display: none;">Vui lòng nhập địa chỉ giao hàng.</span>
            </div>
            <p id="distanceInfo" style="display: none;">Khoảng cách: <span id="distance"></span></p>

            <h6 class="card-title mt-4">Số điện thoại:</h6>
            <div class="form-group">
                <input type="text" id="phoneNumber" name="phoneNumber" class="form-control" placeholder="Nhập số điện thoại" required pattern="^(\+84|0)\d{9,10}$" />
                <span id="phoneError" class="text-danger" style="display: none;">Vui lòng nhập số điện thoại hợp lệ.</span>
            </div>

            <h6 class="card-title mt-4">Chọn phương thức thanh toán:</h6>
            <div class="form-group">
                <select id="paymentMethod" class="form-control" onchange="togglePaymentOptions()">
                    <option value="cash">Thanh toán bằng tiền mặt</option>
                    <option value="momo">Thanh toán qua MoMo</option>
                    <option value="bankCard">Thanh toán bằng thẻ ngân hàng</option>
                </select>
            </div>

            <div id="cashPayment" style="display: none;">
                <form asp-controller="Cart" asp-action="Checkout" method="post" onsubmit="return validateForm()">
                    <input type="hidden" id="hiddenDeliveryAddress" name="deliveryAddress" />
                    <input type="hidden" id="hiddenPhoneNumber" name="phoneNumber" />
                    <input type="hidden" id="hiddenCouponCode" name="couponCode" value="@ViewData["AppliedCoupon"]" />
                    <button type="submit" class="btn btn-primary">Đặt hàng</button>
                </form>
            </div>

            <div id="momoPayment" style="display: none;">
                <form asp-controller="Cart" asp-action="PayWithMoMo" method="post" onsubmit="return validateMoMoForm()">
                    <input type="hidden" id="hiddenDeliveryAddressMomo" name="deliveryAddress" />
                    <input type="hidden" id="hiddenPhoneNumberMomo" name="phoneNumber" />
                    <input type="hidden" id="hiddenCouponCodeMomo" name="couponCode" value="@ViewData["AppliedCoupon"]" />
                    <input type="hidden" id="hiddenShippingCostMomo" name="shippingCost" value="@TempData["ShippingCost"]" />
                    <input type="hidden" id="hiddenDiscountAmountMomo" name="discountAmount" value="@TempData["DiscountAmount"]" />
                    <button type="submit" class="btn btn-success">Thanh toán qua MoMo</button>
                </form>
            </div>

            <div id="bankCardPayment" style="display: none;">
                <form asp-controller="Cart" asp-action="PayWithBankCard" method="post" id="payment-form">
                    <input type="hidden" id="hiddenDeliveryAddressBankCard" name="deliveryAddress" />
                    <input type="hidden" id="hiddenPhoneNumberBankCard" name="phoneNumber" />
                    <input type="hidden" id="hiddenCouponCodeBankCard" name="couponCode" value="@ViewData["AppliedCoupon"]" />
                    <input type="hidden" id="hiddenShippingCostBankCard" name="shippingCost" value="@TempData["ShippingCost"]" />
                    <input type="hidden" id="hiddenDiscountAmountBankCard" name="discountAmount" value="@TempData["DiscountAmount"]" />
                    <div class="form-group">
                        <label for="card-element">Thông tin thẻ:</label>
                        <div id="card-element" class="form-control">
                        </div>
                        <div id="card-errors" role="alert" class="text-danger mt-2"></div>
                    </div>
                    <button type="submit" class="btn btn-warning mt-3">Thanh toán bằng thẻ ngân hàng</button>
                </form>
            </div>

            <h6 class="card-title mt-4">Áp dụng mã giảm giá:</h6>
            <form id="applyCouponForm">
                <input type="text" id="couponCode" name="couponCode" placeholder="Enter coupon code" class="form-control" required />
                <button type="button" class="btn btn-primary mt-2" onclick="applyCoupon()">áp dụng Coupon</button>
            </form>
            <div id="couponMessage" class="mt-2"></div>
            @if (TempData["DiscountedTotal"] != null)
            {
                <h3>Discounted Total: @TempData["DiscountedTotal"] VND</h3>
            }
        </div>
    </div>
}

@section Scripts {
    <script>
        function updateQuantity(productId, quantity, input) {
            if (quantity < 1) {
                input.value = 1;
                quantity = 1;
            }

            $.ajax({
                url: '@Url.Action("UpdateQuantity", "Cart")',
                type: 'POST',
                data: { id: productId, quantity: quantity },
                success: function (response) {
                    if (response.success) {
                        var row = $(input).closest('tr');
                        row.find('.item-total').text(response.itemTotal + ' VND');
                        
                        var total = parseInt(response.total.replace(/[^0-9]/g, '')) || 0;
                        var shippingCost = getShippingCost();
                        var discountAmount = getDiscountAmount();
                        var totalWithShipping = total + shippingCost - discountAmount;

                        $('#total-with-shipping').text(totalWithShipping.toLocaleString('vi-VN') + ' VND');
                    }
                }
            });
        }

        function fetchDistanceAndShippingCost() {
            var customerAddress = document.getElementById("deliveryAddress").value;
            var addressError = document.getElementById("addressError");
            var distanceInfo = document.getElementById("distanceInfo");
            var distanceElement = document.getElementById("distance");

            if (!customerAddress) {
                addressError.style.display = "block";
                return;
            }

            addressError.style.display = "none";

            $.ajax({
                url: '@Url.Action("GetDistanceAndShippingCost", "ManageOrder")',
                type: 'GET',
                data: { customerAddress: customerAddress },
                success: function (response) {
                    if (response.success) {
                        $('#shipping-cost').text(response.shippingCost);
                        distanceElement.textContent = response.distance;
                        distanceInfo.style.display = "block";

                        var total = parseInt($('#total-with-shipping').text().replace(/[^0-9]/g, '')) || 0;
                        var shippingCost = parseInt(response.shippingCost.replace(/[^0-9]/g, '')) || 0;
                        $('#total-with-shipping').text((total + shippingCost - getDiscountAmount()).toLocaleString('vi-VN') + ' VND');
                    } else {
                        alert(response.message);
                    }
                }
            });
        }

        function getShippingCost() {
            var shippingCostText = $('#shipping-cost').text();
            return parseInt(shippingCostText.replace(/[^0-9]/g, '')) || 0;
        }

        function getDiscountAmount() {
            var discountAmountText = '@(TempData["DiscountAmount"] ?? 0)';
            return parseInt(discountAmountText.replace(/[^0-9]/g, '')) || 0;
        }

        $(document).ready(function () {
            calculateShippingCost();
        });

        function togglePaymentOptions() {
            var paymentMethod = document.getElementById("paymentMethod").value;

            document.getElementById("cashPayment").style.display = paymentMethod === "cash" ? "block" : "none";
            document.getElementById("momoPayment").style.display = paymentMethod === "momo" ? "block" : "none";
            document.getElementById("bankCardPayment").style.display = paymentMethod === "bankCard" ? "block" : "none";
        }

        document.addEventListener("DOMContentLoaded", function () {
            togglePaymentOptions();
        });

        function applyCoupon() {
            var couponCode = document.getElementById("couponCode").value;
            var shippingCost = parseInt($('#shipping-cost').text().replace(/[^0-9]/g, '')) || 0;

            if (!couponCode) {
                $('#couponMessage').html('<div class="alert alert-danger">Vui lòng nhập mã coupon.</div>');
                return;
            }

            console.log("Sending AJAX request with couponCode:", couponCode, "and shippingCost:", shippingCost);

            $.ajax({
                url: '@Url.Action("ApplyCoupon", "Cart")',
                type: 'POST',
                data: { couponCode: couponCode, shippingCost: shippingCost },
                success: function (response) {
                    if (response.success) {
                        $('#total-with-shipping').text(response.discountedTotal + ' VND');
                        $('#couponMessage').html('<div class="alert alert-success">' + response.message + '</div>');
                    } else {
                        $('#couponMessage').html('<div class="alert alert-danger">' + response.message + '</div>');
                    }
                },
                error: function (xhr, status, error) {
                    console.error("AJAX error:", xhr.responseText);
                    $('#couponMessage').html('<div class="alert alert-danger">Đã xảy ra lỗi khi áp dụng coupon. Vui lòng thử lại.</div>');
                }
            });
        }

        function validatePhoneNumber() {
            var phoneInput = document.getElementById("phoneNumber");
            var phoneError = document.getElementById("phoneError");
            var phonePattern = /^(\+84|0)\d{9,10}$/;

            if (!phonePattern.test(phoneInput.value)) {
                phoneError.style.display = "block";
                return false;
            }

            phoneError.style.display = "none";
            return true;
        }

        document.getElementById("phoneNumber").addEventListener("input", validatePhoneNumber);

        function validateForm() {
            var deliveryAddress = document.getElementById("deliveryAddress").value;
            var phoneNumber = document.getElementById("phoneNumber").value;

            if (!deliveryAddress) {
                alert("Vui lòng nhập địa chỉ giao hàng.");
                return false;
            }

            if (!/^(\+84|0)\d{9,10}$/.test(phoneNumber)) {
                alert("Vui lòng nhập số điện thoại hợp lệ.");
                return false;
            }

            document.getElementById("hiddenDeliveryAddress").value = deliveryAddress;
            document.getElementById("hiddenPhoneNumber").value = phoneNumber;

            return true;
        }

        function validateMoMoForm() {
            var deliveryAddress = document.getElementById("deliveryAddress").value;
            var phoneNumber = document.getElementById("phoneNumber").value;

            if (!deliveryAddress) {
                alert("Vui lòng nhập địa chỉ giao hàng.");
                return false;
            }

            if (!/^(\+84|0)\d{9,10}$/.test(phoneNumber)) {
                alert("Vui lòng nhập số điện thoại hợp lệ.");
                return false;
            }

            document.getElementById("hiddenDeliveryAddressMomo").value = deliveryAddress;
            document.getElementById("hiddenPhoneNumberMomo").value = phoneNumber;

            return true;
        }

        function removeFromCart(productId) {
            if (confirm("Bạn có chắc chắn muốn xóa sản phẩm này khỏi giỏ hàng?")) {
                $.ajax({
                    url: '@Url.Action("RemoveFromCart", "Cart")',
                    type: 'POST',
                    data: { id: productId },
                    success: function () {
                        location.reload(); 
                    },
                    error: function () {
                        alert("Đã xảy ra lỗi khi xóa sản phẩm khỏi giỏ hàng.");
                    }
                });
            }
        }
    </script>
    <script src="https://js.stripe.com/v3/"></script>
    <script>
        var stripe = Stripe('pk_test_51R7IV1P0rZbelfDLoZqH7OPsdn2z562SaS0SabQrOi9MAksDFHutL2apv0jkja7xul1TssZLDsrRAPOg7wTixJ1500HmP2gLoO'); 
        var elements = stripe.elements();

        var style = {
            base: {
                color: '#32325d',
                fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
                fontSmoothing: 'antialiased',
                fontSize: '16px',
                '::placeholder': {
                    color: '#aab7c4'
                }
            },
            invalid: {
                color: '#fa755a',
                iconColor: '#fa755a'
            }
        };

        var card = elements.create('card', { style: style });
        card.mount('#card-element');

        var form = document.getElementById('payment-form');
        form.addEventListener('submit', function (event) {
            event.preventDefault();

            document.getElementById("hiddenDeliveryAddressBankCard").value = document.getElementById("deliveryAddress").value;
            document.getElementById("hiddenPhoneNumberBankCard").value = document.getElementById("phoneNumber").value;

            stripe.createToken(card).then(function (result) {
                if (result.error) {
                    var errorElement = document.getElementById('card-errors');
                    errorElement.textContent = result.error.message;
                } else {
                    var hiddenInput = document.createElement('input');
                    hiddenInput.setAttribute('type', 'hidden');
                    hiddenInput.setAttribute('name', 'stripeToken');
                    hiddenInput.setAttribute('value', result.token.id);
                    form.appendChild(hiddenInput);

                    form.submit();
                }
            });
        });
    </script>
}

<style>
    .quantity-input {
        width: 100px; 
        text-align: center; 
    }

    table.table td {
        text-align: center;
        vertical-align: middle; 
    }

    table.table img {
        width: 150px;
        height: auto;
    }
    body {
    color: white;
}

table.table td, table.table th, h1, h3, label, p, .btn {
    color: white !important;
}

.alert {
    color: black !important;
}

</style>